import aiogram as aio
import random as rnd
from module.Wiki.Wikipedia import getwiki
from module.RPS import RPS
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from module.YT.YT import yt_video_return,yt_video_search
from module.MultiUse import multiUseMod
phrase_tuple = ('–ß—Ç–æ –±—ã —ç—Ç–æ –∑–Ω–∞—á–∏–ª–æ...', '–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...', '–≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–º, —Å–æ—Ä–∏ —á–µ–ª...', '–£–º–Ω—ã–µ –º—ã—Å–ª–∏ –¥–æ–≥–æ–Ω—è–ª–∏ –µ–≥–æ, –Ω–æ –æ–Ω –±—ã–ª –±—ã—Å—Ç—Ä–µ–µ...')
textTupleEcho1 = ('–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥ –≥–æ–≤–æ—Ä–∏—Ç:','–ö–∞—Ä—Ç–º–∞–Ω –≥–æ–≤–æ—Ä–∏—Ç:','–î–∂–∞–º–∞–ª —Å–∫–∞–∑–∞–ª:','–ù–∏–∫–∏—Ç–∞ –î–∂–∏–≥—É—Ä–¥–∞ —Å–æ —Å—Ç–æ–Ω–æ–º –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç:','–ê–º–æ–≥—É—Å—ã –∫—Ä–∏—á–∞—Ç:','–°–æ–ª –ì—É–¥–º–∞–Ω –≤—ã—Å–∫–∞–∑–∞–ª—Å—è:','–ê—Ä–º—è–Ω–µ –∫—Ä–∏—á–∞—Ç:')
textTupleEcho2 = ('–∞ —Ç—ã –∫—É—Å–æ—á–µ–∫ –Ω–µ–∂–Ω–æ—Å—Ç–∏','–∞ —Ç—ã –∫—É–ø–∏ –ø–æ–∫—É—à–∞—Ç—å','–∞ —Ç—ã –º–∏–ª–∞—à–∏–∫','–∞ —Ç—ã –≤–æ–æ–±—â–µ –∫–æ—Ç–∏–∫, –∞ —Ç–µ–±–µ –≤–æ—Ç —ç—Ç–æ –≤—Å–µ –Ω–µ –Ω—É–∂–Ω–æ ^3^','–∞ —Ç—ã –≤–∑–≥–ª—è–Ω–∏ –Ω–∞ —Å–µ–±—è...–¢–∞–∫–æ–π –¥—É—Ä–∞—à–∫–∞~','–∞ —Ç—ã —Ç–∞–∫–æ–π –ø—É—Å–∏—á–∫–∞')
textTupleClose = ('–ù–µ –∏–≥—Ä–∞–µ–º, –ø–æ–ª—É—á–∞–µ—Ç—Å—è...','–≠—Ö—å...','–ù—É —Ä–∞–∑ —Ç–∞–∫...','–õ–∞–¥–Ω–æ, –æ—Ç–¥—ã—Ö–∞–π~','–ù–µ —Ö–æ—á–µ—à—å, –∫–∞–∫ —Ö–æ—á–µ—à—å!!! :–†','–ü—Ä–æ—Å—Ç–∏, —á—Ç–æ —è —Ç–∞–∫–∞—è –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è...','–ü—Ä–∏—Ö–æ–¥–∏ —Å–Ω–æ–≤–∞)')
textTupleHelp = ('–ü–æ–º–æ—â—å –≤ —Å—Ç—É–¥–∏—é!','–ì–æ—Ç–æ–≤–∞ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º)','–ó–∞—á–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã–∫–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–æ—á–∫—É...','–ü–ï–†–ï–°–¢–ê–ù–¨, –∑–¥–µ—Å—å –≤—Å–µ –µ—Å—Ç—å','–ú–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω—É —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ...','–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç—ã–∫–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫–∏?','–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ','–≠—Ç–æ —É–∂–µ –∞–±—Å—É—Ä–¥ –∫–∞–∫–æ–π-—Ç–æ...','–¢—ã –∏–∑–¥–µ–≤–∞–µ—à—å—Å—è, –¥–∞?','–í–æ—Ç –µ—â—ë –¢–û–ß–ù–û —Ç–∞–∫–∞—è –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è~')

with open('privacy/TockenFile.txt','r') as tokenDEloriAI_file:
    thisDEloriAItoken  = tokenDEloriAI_file.read()

DEloriAI = aio.Bot(thisDEloriAItoken)
dp = aio.Dispatcher(DEloriAI)

rock = RPS.GameItem('–ö–∞–º–µ–Ω—å ü™®', 0, 2, 1)
paper = RPS.GameItem('–ë—É–º–∞–≥–∞ üßª', 1, 0, 2)
scissors = RPS.GameItem('–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è', 2, 1, 0)
handGame = RPS.handItem(rock, scissors, paper)


BTN_ROCK = InlineKeyboardButton('–ö–∞–º–µ–Ω—å ü™®',callback_data='Rock')
BTN_PAPER = InlineKeyboardButton('–ë—É–º–∞–≥–∞ üßª',callback_data='Paper')
BTN_SCISSORS = InlineKeyboardButton('–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è',callback_data='Scissors')
BTN_CLOSE = InlineKeyboardButton('–Ø —É—Å—Ç–∞–ª—å...', callback_data='RPSstop')
BTN_COMMANDS = InlineKeyboardButton('–õ–µ—Ç—Å –≥–æ—É', callback_data='start')
BTN_COMMANDS_HELPER = InlineKeyboardButton('–ü–æ–º–æ–≥–∏—Ç–µ...', callback_data='help')
BTN_ECHO = InlineKeyboardButton('–ò–≥—Ä–∞ \"–≠—Ö–æ\"',callback_data='echo')
BTN_ECHO_STOP = InlineKeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —ç—Ç–æ—Ç —Ü–∏—Ä–∫...', callback_data='echostop')
BTN_RPS = InlineKeyboardButton('–ò–≥—Ä–∞ ü™®-‚úÇÔ∏è-üßª', callback_data='RPS')
BTN_WIKI = InlineKeyboardButton('Wikipedia', callback_data='wiki')
BTN_WIKI_STOP=InlineKeyboardButton('–Ø –º–Ω–æ–≥–æ —É–∑–Ω–∞–ª, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç...', callback_data='wikistop')
BTN_YT = InlineKeyboardButton('YouTube', callback_data='YT')
BTN_YT_STOP=InlineKeyboardButton('–Ø —É—Å—Ç–∞–ª —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–æ—Å–∏–∫–∏, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç...', callback_data='YTstop')

RPS_KB = InlineKeyboardMarkup().add(BTN_ROCK,BTN_SCISSORS,BTN_PAPER,BTN_CLOSE)
GAME_KB = InlineKeyboardMarkup().add(BTN_COMMANDS_HELPER,BTN_ECHO,BTN_RPS,BTN_WIKI,BTN_YT)
START_KB = InlineKeyboardMarkup().add(BTN_COMMANDS)
ECHO_KB = InlineKeyboardMarkup().add(BTN_ECHO_STOP)
WIKI_KB = InlineKeyboardMarkup().add(BTN_WIKI_STOP)
YT_KB = InlineKeyboardMarkup().add(BTN_YT_STOP)

@dp.message_handler(commands=['start'])
async def process_start_command(message: aio.types.Message):
    multiUseMod.dirUser(message.from_user.id)
    await message.reply('–ü—Ä–∏–≤–µ—Ç? –¢—ã –∑–¥–µ—Å—å? –Ø –î—ç–ª–æ—Ä–ò, —Å–æ –º–Ω–æ–π –Ω–µ —Å–∫—É—á–Ω–æ)', reply_markup=START_KB)

@dp.message_handler(commands=['help'])
async def process_help_command(message: aio.types.Message):
    await message.reply('/help - –∫–æ–º–∞–Ω–¥—ã\n/echo - –≠—Ö–æ–ë–æ—Ç\n/RPS - ü™®-‚úÇÔ∏è-üßª')
@dp.callback_query_handler(text='start')
async def process_start_command(callback_query: aio.types.CallbackQuery):
    await DEloriAI.answer_callback_query(callback_query.id)
    await DEloriAI.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–í–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
        reply_markup=GAME_KB
    )
    '''await DEloriAI.send_message(callback_query.from_user.id,text='–í–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',reply_markup=GAME_KB)
'''
@dp.callback_query_handler(text='help')
async def process_help_command(callback_query: aio.types.CallbackQuery):
    await DEloriAI.answer_callback_query(callback_query.id)
    await DEloriAI.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=rnd.choice(textTupleHelp),
        reply_markup=GAME_KB
    )
    '''await DEloriAI.send_message(callback_query.from_user.id,text='–ü–æ–º–æ—â—å –≤ —Å—Ç—É–¥–∏—é:',reply_markup=GAME_KB)
'''
@dp.message_handler(commands=['echo'])
async def echo_bot(message:aio.types.Message):
    await message.reply('–ò–≥—Ä–∞–µ–º –≤ –≠—Ö–æ! –ù–∞–∂–º–∏ /echostop –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å)')
    with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_echo.txt', 'w') as flagEcho_file:
        flagEcho_file.write('True')
@dp.callback_query_handler(text='echo')
async def echo_bot(callback_query:aio.types.CallbackQuery):
    await DEloriAI.answer_callback_query(callback_query.id)
    await DEloriAI.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–ò–≥—Ä–∞–µ–º –≤ –≠—Ö–æ! –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å',
        reply_markup=ECHO_KB
        )
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_echo.txt', 'w') as flagEcho_file:
        flagEcho_file.write('True')
@dp.message_handler(commands=['RPS'])
async def RPS_bot(message: aio.types.Message):
    await message.reply('–ò–≥—Ä–∞–µ–º –≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞!\n/Rock - ü™®\n/Paper - üßª\n/Scissors - ‚úÇÔ∏è\n–ù–∞–∂–º–∏ /RPSstop –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å)',reply_markup=RPS_KB)
    with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_RPS.txt', 'w') as flagRPS_file:
        flagRPS_file.write('True')
@dp.callback_query_handler(text='RPS')
async def RPS_bot(callback_query: aio.types.CallbackQuery):
    await DEloriAI.answer_callback_query(callback_query.id)
    await DEloriAI.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–ò–≥—Ä–∞–µ–º –≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥—É',
        reply_markup=RPS_KB
    )
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_RPS.txt', 'w') as flagRPS_file:
        flagRPS_file.write('True')

@dp.message_handler(commands=['Rock'])
async def thisRock(message: aio.types.Message):
    with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_RPS.txt', 'r') as flagRPS_file:
        if flagRPS_file.read() == 'True':
            playerTurn = handGame.choise(thisPlayer=True, thisChoise=1)
            PCTurn = handGame.choise(thisPlayer=False, thisChoise=1)
            resultMSG = RPS.compareHand(playerTurn['Game_Item'],PCTurn['Game_Item'])
            await DEloriAI.send_message(
                message.from_user.id,
                text=f"{playerTurn['msg']}\n{PCTurn['msg']}\n{resultMSG}\n\n/Rock - ü™®\n/Paper - üßª\n/Scissors - ‚úÇÔ∏è\n–ù–∞–∂–º–∏ /RPSstop –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å",
                reply_markup=RPS_KB
            )

@dp.message_handler(commands=['Paper'])
async def thisPaper(message: aio.types.Message):
    with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_RPS.txt', 'r') as flagRPS_file:
        if flagRPS_file.read() == 'True':
            playerTurn = handGame.choise(thisPlayer=True, thisChoise=3)
            PCTurn = handGame.choise(thisPlayer=False, thisChoise=3)
            resultMSG = RPS.compareHand(playerTurn['Game_Item'], PCTurn['Game_Item'])
            await DEloriAI.send_message(
                message.from_user.id,
                text=f"{playerTurn['msg']}\n{PCTurn['msg']}\n{resultMSG}\n\n/Rock - ü™®\n/Paper - üßª\n/Scissors - ‚úÇÔ∏è\n–ù–∞–∂–º–∏ /RPSstop –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å",
                reply_markup=RPS_KB
            )


@dp.message_handler(commands=['Scissors'])
async def thisScisors(message: aio.types.Message):
    with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_RPS.txt', 'r') as flagRPS_file:
        if flagRPS_file.read() == 'True':
            playerTurn = handGame.choise(thisPlayer=True, thisChoise=2)
            PCTurn = handGame.choise(thisPlayer=False, thisChoise=2)
            resultMSG = RPS.compareHand(playerTurn['Game_Item'], PCTurn['Game_Item'])
            await DEloriAI.send_message(
                message.from_user.id,
                text=f"{playerTurn['msg']}\n{PCTurn['msg']}\n{resultMSG}\n\n/Rock - ü™®\n/Paper - üßª\n/Scissors - ‚úÇÔ∏è\n–ù–∞–∂–º–∏ /RPSstop –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å",
                reply_markup=RPS_KB
            )

@dp.callback_query_handler(text='Rock')
async def thisRock(callback_query: aio.types.CallbackQuery):
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_RPS.txt', 'r') as flagRPS_file:
        if flagRPS_file.read() == 'True':
            playerTurn = handGame.choise(thisPlayer=True, thisChoise=1)
            PCTurn = handGame.choise(thisPlayer=False, thisChoise=1)
            resultMSG = RPS.compareHand(playerTurn['Game_Item'],PCTurn['Game_Item'])
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"{playerTurn['msg']}\n{PCTurn['msg']}\n{resultMSG}\n",
                reply_markup=RPS_KB
            )

@dp.callback_query_handler(text='Paper')
async def thisPaper(callback_query: aio.types.CallbackQuery):
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_RPS.txt', 'r') as flagRPS_file:
        if flagRPS_file.read() == 'True':
            playerTurn = handGame.choise(thisPlayer=True, thisChoise=3)
            PCTurn = handGame.choise(thisPlayer=False, thisChoise=3)
            resultMSG = RPS.compareHand(playerTurn['Game_Item'],PCTurn['Game_Item'])
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"{playerTurn['msg']}\n{PCTurn['msg']}\n{resultMSG}\n",
                reply_markup=RPS_KB
            )


@dp.callback_query_handler(text='Scissors')
async def thisScissors(callback_query: aio.types.CallbackQuery):
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_RPS.txt', 'r') as flagRPS_file:
        if flagRPS_file.read() == 'True':
            playerTurn = handGame.choise(thisPlayer=True, thisChoise=2)
            PCTurn = handGame.choise(thisPlayer=False, thisChoise=2)
            resultMSG = RPS.compareHand(playerTurn['Game_Item'],PCTurn['Game_Item'])
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"{playerTurn['msg']}\n{PCTurn['msg']}\n{resultMSG}",
                reply_markup=RPS_KB
            )
@dp.callback_query_handler(text='RPSstop')
async def Stopper(callback_query: aio.types.CallbackQuery):
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_RPS.txt', 'r') as flagRPS_file:
        if flagRPS_file.read() == 'True':
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=rnd.choice(textTupleClose),
                reply_markup=GAME_KB
            )
            with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_RPS.txt', 'w') as flagRPS_file:
                flagRPS_file.write('False')
        elif flagRPS_file.read() == 'False':
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.send_message(callback_query.from_user.id, text=rnd.choice(phrase_tuple))
@dp.callback_query_handler(text='echostop')
async def Stopper(callback_query: aio.types.CallbackQuery):
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_echo.txt', 'r') as flagEcho_file:
        if flagEcho_file.read() == 'True':
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=rnd.choice(textTupleClose),
                reply_markup=GAME_KB
            )

            with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_echo.txt', 'w') as flagEcho_file:
                flagEcho_file.write('False')
        elif flagEcho_file.read() == 'False':
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.send_message(callback_query.from_user.id, text=rnd.choice(phrase_tuple))
@dp.callback_query_handler(text='YT')
async def YT_bot(callback_query:aio.types.CallbackQuery):
    await DEloriAI.answer_callback_query(callback_query.id)
    await DEloriAI.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–ú–∏–Ω–∏-—é—Ç—É–±—á–∏–∫\n–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)',
        reply_markup=YT_KB
        )
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_YT.txt', 'w') as flagYT_file:
        flagYT_file.write('True')

@dp.callback_query_handler(text='YTstop')
async def YTStopper(callback_query: aio.types.CallbackQuery):
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_YT.txt', 'r') as flagYT_file:
        if flagYT_file.read() == 'True':

            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=rnd.choice(textTupleClose),
                reply_markup=GAME_KB
            )

            with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_YT.txt',
                      'w') as flagYT_file:
                flagYT_file.write('False')
        elif flagYT_file.read() == 'False':
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.send_message(callback_query.from_user.id, text=rnd.choice(phrase_tuple))


@dp.callback_query_handler(text='wiki')
async def echo_bot(callback_query:aio.types.CallbackQuery):
    await DEloriAI.answer_callback_query(callback_query.id)
    await DEloriAI.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text='–ú–∏–Ω–∏-–≤–∏–∫–∏–ø–µ–¥–∏—è\n–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å.',
        reply_markup=WIKI_KB
        )
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_wiki.txt','w') as flagWiki_file:
        flagWiki_file.write('True')
@dp.callback_query_handler(text='wikistop')
async def Stopper(callback_query: aio.types.CallbackQuery):
    with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_wiki.txt', 'r') as flagWiki_file:
        if flagWiki_file.read() == 'True':
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=rnd.choice(textTupleClose),
                reply_markup=GAME_KB
            )
            with open(f'cache/multiUse/Users/{str(callback_query.from_user.id)}/cache/flag_wiki.txt', 'w') as flagWiki_file:
                flagWiki_file.write('False')
        elif flagWiki_file.read() == 'False':
            await DEloriAI.answer_callback_query(callback_query.id)
            await DEloriAI.send_message(callback_query.from_user.id, text=rnd.choice(phrase_tuple))



@dp.message_handler()
async def get_text_from_messages(message: aio.types.Message):
    with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_echo.txt', 'r') as flagEcho_file:
        with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_RPS.txt', 'r') as flagRPS_file:
            with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_YT.txt', 'r') as flagYT_file:
                with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_wiki.txt', 'r') as flagWiki_file:
                    if flagRPS_file.read() == 'False' and flagWiki_file.read() == 'False' and flagYT_file.read() == 'False':
                        if flagEcho_file.read() == 'True':
                            if message.text != '/echostop':
                                await DEloriAI.send_message(
                                    message.from_user.id,
                                    f'{rnd.choice(textTupleEcho1)} \"{message.text}\",'
                                    f' {rnd.choice(textTupleEcho2)}',
                                    reply_markup=ECHO_KB
                                )

                            elif message.text == '/echostop':
                                await DEloriAI.send_message(
                                    message.from_user.id,
                                    f'{rnd.choice(phrase_tuple)}'
                                )

                        elif flagEcho_file.read() == 'True':

                            await message.reply(rnd.choice(phrase_tuple))
                            with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_echo.txt',
                                      'w') as flagEcho_file:
                                flagEcho_file.write('False')
                    elif flagRPS_file.read() == 'False' and flagEcho_file.read() == 'False' and flagYT_file.read()== 'False':
                        if flagWiki_file.read() == 'True':
                            if message.text != '/wikistop':
                                await DEloriAI.send_message(
                                    message.from_user.id,
                                    getwiki(message),
                                    reply_markup=WIKI_KB
                                )

                            elif message.text == '/wikistop':
                                await DEloriAI.send_message(
                                    message.from_user.id,
                                    f'{rnd.choice(phrase_tuple)}'
                                )

                        elif flagWiki_file.read() == 'False':

                            await message.reply(rnd.choice(phrase_tuple))
                            with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_wiki.txt',
                                  'w') as flagWiki_file:
                                flagWiki_file.write('False')
                    elif flagRPS_file.read() == 'False' and flagEcho_file.read() == 'False' and flagWiki_file.read() == 'False':
                        if flagYT_file.read() == 'True':
                            if message.text != '/YTstop':
                                myKW = message.text
                                myIdList = yt_video_search(myKW)
                                myLinkList = yt_video_return(myIdList)
                                for i in myLinkList:
                                    await DEloriAI.send_message(message.from_user.id, text=i, reply_markup=YT_KB)

                            elif message.text == '/YTstop':
                                await DEloriAI.send_message(
                                    message.from_user.id,
                                    f'{rnd.choice(phrase_tuple)}'
                                )

                        elif flagYT_file.read() == 'False':

                            await message.reply(rnd.choice(phrase_tuple))
                            with open(f'cache/multiUse/Users/{str(message.from_user.id)}/cache/flag_YT.txt',
                                      'w') as flagYT_file:
                                flagYT_file.write('False')
aio.executor.start_polling(dp)
